$maxWidthContainer:1200;
// $maxWidth:1920;
$containerWidth:1100;
$minWidth:320; //ставить что бы считало минимальное до этого
// $keepSize:0;
// $maxWidth:0;
// @include adaptiv-value( "padding" 50, 20, 0, );

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }

    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // Для calc();
    $addSize: math.div($startSize - $minSize, 16);



    @if ($widthFrom==$containerWidth and $maxWidthContainer==0) {
        $widthFrom: $maxWidth;
    }

    // Брейк-поинты в EM
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Формула плавающего значения
    // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope+$minSize;

    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }

    $flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

    // Получение значения свойства
    $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

    // Если отрицательные значения
    @if ($minSize > $startSize) {
        $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
    }

    // Если поддерживается clamp();
    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }

    // Если не поддерживается clamp();
    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
    }

    // Устанавливаем значения по умолчанию
    @if $widthFrom !=$containerWidth and $widthFrom !=$maxWidth and $keepSize !=1 and $keepSize !=2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }

    @if $widthTo !=$minWidth and $keepSize !=1 and $keepSize !=3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}

@mixin line-height($font-size, $line-height, $px, ) {
    line-height: ($line-height / $font-size);
    font-size: ($font-size + $px);
}

//Percent
@function percent($px, $from) {
    $result: math.div($px, $from) * 100%;
    @return $result;
}

//REM
@function rem($px) {
    $result: math.div($px, 10) + rem;
    @return $result;
}

//EM
@function em($px, $current: 16) {
    $result: math.div($px, $current) + em;
    @return $result;
}

// !!!
html {
    font-size: 62.5%;

    @media (max-width: 1200px) {
        font-size: 50%;
    }

    @media (max-width: 768px) {
        font-size: 40%;
    }
}

html,
body {
    height: 100%;
}

body {
    font-family: 'Poppins';
    color: rgb(33, 36, 61);
    font-size: 18px;
    font-weight: 400;
    line-height: 1.4;
}

// .checkbox-hidden {
//     width: 1px;
//     height: 1px;
//     overflow: hidden;
//     clip: rect(0 0 0 0);
//     position: absolute;
// }

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}

.main {
    flex-grow: 1;
}

.container {
    max-width: 1230px;
    margin: 0 auto;
    padding: 0 15px;
}

.logo {
    &__header {
        width: 315px;
        height: 80px;
        object-fit: cover;
    }

    &__mobile {
        width: 240px;
        height: 60px;
        object-fit: cover;
    }

    &__footer {
        @include adaptiveValue("width", 570, 140);
        @include adaptiveValue("height", 190, 45);
        object-fit: contain;
    }
}

.title {
    font-weight: 700;
}

.section {
    @include adaptiveValue("padding-top", 100, 65);
    @include adaptiveValue("padding-bottom", 100, 65);
}

.btn {
    font-weight: 500;
    line-height: 17px;
    font-size: 23px;
    border: 2px solid rgba(0, 0, 0, 0);
    background-color: rgb(215, 56, 56);
    color: rgb(255, 255, 255);
    transition: background-color 0.5s;

    &:focus {
        color: $focus;
    }

    &:hover {
        background-color: #21243d;
        color: $white;
    }

    &:active {
        color: $active;
    }
}

.video {
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    display: block;
    position: relative;
    border-radius: 6px;
    transition: color 0.5s;

    &:focus {
        color: $focus;
    }

    &:hover {
        .video__icon {
            transition: background-color 0.5s;
            background-color: red;
        }
    }

    &:active {
        color: $active;
    }

    &__icon {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translateX(-50%);
        width: 65px;
        height: 40px;
        background: rgba(0, 0, 0, .55);
        border-radius: 6px;
        position: relative;

        &::before {
            content: "";
            position: absolute;
            top: 30%;
            left: 50%;
            transform: translateX(-50%);
            z-index: 100;
            border-color: transparent transparent transparent #fff;
            border-style: solid;
            border-width: 9.5px 0 9.5px 17px;
        }
    }
}

@function max($numbers...) {
    @return m#{a}x(#{$numbers});
}

@function min($numbers...) {
    @return m#{i}n(#{$numbers});
}